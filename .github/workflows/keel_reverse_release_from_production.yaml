name: Reverse Release
on:
  pull_request:
    branches:
      - master
    types:
      - closed
permissions:
  id-token: write
  contents: read
jobs:
  create_pull_request:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref != 'develop'
    timeout-minutes: 10
    runs-on: [self-hosted, organization]
    steps:
      - id: own_repository_write_credentials
        uses: lifull-growth/configure-github-credentials@v0
        with:
          role: OwnRepositoryWrite
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.own_repository_write_credentials.outputs.token }}
          script: |
            const reverseReleaseBranchName = 'master-reverse-release';
            const ref = await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: "heads/master" });
            const sha = ref.data.object.sha;
            const mergedByUser = '${{ github.event.pull_request.merged_by.login }}';

            try {
              await github.rest.git.updateRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `heads/${reverseReleaseBranchName}`, sha: sha, force: true });
            } catch (err) {
              await github.rest.git.createRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `refs/heads/${reverseReleaseBranchName}`, sha: sha });
            }

            const reverseReleasePullRequests = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, base: 'develop', head: `${{ github.repository_owner }}:${reverseReleaseBranchName}`, state: 'open' })
            await Promise.all(reverseReleasePullRequests.data.map((pull) => {
              return github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pull.number,
                assignees: [mergedByUser],
              });
            }));
            if (reverseReleasePullRequests.data.length > 0) {
              return;
            }

            const reverseRequestPullRequest = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: 'refs/heads/develop',
                head: reverseReleaseBranchName,
                title: '[Reverse release from production to test, pool] master => develop',
                body: `
            @${mergedByUser}
            Reverse ReleaseのためのPull Requestを作成しました。速やかにReverse Releaseを行ってください。

            Conflictが発生している場合は以下の手順で解消してください。
            \`\`\`sh
            $ git fetch
            $ git checkout -b ${reverseReleaseBranchName} origin/${reverseReleaseBranchName}
            $ git rebase origin/develop # ここで手動でConflictを解消する
            $ git push origin ${reverseReleaseBranchName}
            \`\`\`
            `});

            return github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: reverseRequestPullRequest.data.number,
              assignees: [mergedByUser],
            });
