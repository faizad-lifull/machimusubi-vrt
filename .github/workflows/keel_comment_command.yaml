name: Comment Command
on:
  issue_comment:
    types:
      - created
      - edited
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BODY: ${{ github.event.comment.body }}
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write
jobs:
  comment:
    timeout-minutes: 10
    runs-on: [self-hosted, organization]
    if: github.event.issue.state == 'open'
    steps:
      - id: own_repository_write_credentials
        uses: lifull-growth/configure-github-credentials@v0
        with:
          role: OwnRepositoryWrite
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.own_repository_write_credentials.outputs.token }}
      - name: keelctl
        run: |
          if [[ "$BODY" = "/keelctl rebase" ]]; then
            pr=$(curl -sSL -X GET -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
            mergeable_state=$(echo $pr | jq -r .mergeable_state)
            if [ "$mergeable_state" = "dirty" ] || [ "$mergeable_state" = "behind" ]; then
              git config --global user.email "keel@lifull.com"
              git config --global user.name "keel"
              branch=$(echo $pr | jq -r .head.ref)
              base=$(echo $pr | jq -r .base.ref)
              git checkout -b ${branch} origin/${branch}
              if git rebase origin/${base}; then
                git push -f origin ${branch}
              else
                body=$(cat <<EOS
          Conflictが発生しているなど \`git rebase\` の実行に失敗しました。
          手動で解消お願いします。
          なお、特定の追記のみが行われるファイルにおいては \`.gitattributes\` で \`merge=union\` を設定することでこのコマンドでのConflictの自動解消が見込めます。
          EOS
          )
                curl -sSL -X POST -H "Authorization: token ${GITHUB_TOKEN}" -d "$(jq -n --arg body "$body" '{$body}')" ${{ github.event.issue.comments_url }}
              fi
            fi
          fi
      - name: keelai
        env:
          MODEL: gpt-4o
        run: |
          function keelai() {
            ID_TOKEN=$(curl -sSL -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${GITHUB_ACTION_PATH}" | jq -r .value)
            response=$(curl -sSL -X POST -H "Authorization: Bearer $ID_TOKEN" -H "Content-Type: application/json" https://keelai-api-vpce.k8s.nxin.jp/v1/chat/completions -d "$(echo $@ | jq -sc --arg model "$MODEL" '. as $messages | {"model": $model, "messages": $messages}')")

            if [ "$(echo $response | jq -r '.error')" != "null" ]; then
              echo $response | jq -r '.error' 1>&2
              exit 1
            fi

            echo $response | jq -r '.choices[0].message.content'
          }

          if [[ "$BODY" = "/keelai translate" ]]; then
            issue=$(curl -sSL -X GET -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }})

            systemPrompt=$(cat <<'EOS'
          Translate the given text according to the following rules.

          ## Rules
          - Translate English to Japanese.
          - Translate Vietnamese to Japanese.
          - Translate Japanese to English and Vietanamese.
          EOS
          )
            userPrompt=$(echo $issue | jq -r '.body')

            system=$(jq -n --arg role "system" --arg content "$systemPrompt" '{"role": $role, "content": $content}')
            user=$(jq -n --arg role "user" --arg content "$userPrompt" '{"role": $role, "content": $content}')
            body=$(keelai "$system" "$user")
            curl -sSL -X POST -H "Authorization: token ${GITHUB_TOKEN}" -d "$(jq -n --arg body "$body" '{$body}')" ${{ github.event.issue.comments_url }}
          fi

          if [[ "$BODY" = "/keelai summary" ]]; then
            comments=$(curl -sSL -X GET -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments)

            systemPrompt=$(cat <<'EOS'
          Your task is to create a concise running summary of actions and information results in the provided text while keeping the input language, focusing on key and potentially important information to remember.
          EOS
          )
            userPrompt=$(echo $comments | jq -r '.[].body')

            system=$(jq -n --arg role "system" --arg content "$systemPrompt" '{"role": $role, "content": $content}')
            user=$(jq -n --arg role "user" --arg content "$userPrompt" '{"role": $role, "content": $content}')
            body=$(keelai "$system" "$user")
            curl -sSL -X POST -H "Authorization: token ${GITHUB_TOKEN}" -d "$(jq -n --arg body "$body" '{$body}')" ${{ github.event.issue.comments_url }}
          fi

          if [[ "$BODY" = "/keelai review" ]] && [[ "${{ github.event.issue.pull_request }}" != "null" ]]; then
            pr=$(curl -sSL -X GET -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})

            export GITHUB_EVENT_PATH=$(mktemp)
            cat <<EOS > $GITHUB_EVENT_PATH
          {
            "repository": ${{ toJSON(github.event.repository) }},
            "pull_request": $pr
          }
          EOS

            base=$(echo $pr | jq -r .base.ref)
            head=$(echo $pr | jq -r .head.ref)
            diff=$(git diff origin/${base}...origin/${head})

            systemPrompt=$(cat <<'EOS'
          Your task is to identify and point out misspellings, security and performance issues from the given git diff.

          The output MUST be `%f:%l: %m` format.
          ```
          %f: File name
          %l: Line number
          %m: Message
          ```

          Line number MUST be the line number of the file that calculated from the diff.

          ### Example

          `@@ -225,7 +225,7 @@` means the diff is starting from line 225 and the diff is 7 lines long.
          So if the misspelling is on diff line 3(Skip counting `-` lines), the output must be `file_name:228: misspelling: misspelled_word`.

          Input:
          ```
          diff --git a/bot/bot/main.py b/bot/bot/main.py
          index 45a20f1..923483f 100644
          --- a/bot/bot/main.py
          +++ b/bot/bot/main.py
          @@ -110,5 +110,5 @@ async def get_rate_limiter() -> keelai.rate_limit.RateLimiter:
                          redis_client.execute_command = types.MethodType(new_execute_command, redis_client)
          -               global_rate_limiter = keelai.rate_limit.RedisSlidingRateLimiter(redis_client, limit=s.rate_limit_per_interval, interval_seconds=s.rate_limit_interval_seconds)
          +               global_rate_limiter = keelai.rate_limit.RedisSlidingRateLimter(redis_client, limit=s.rate_limit_per_interval, interval_seconds=s.rate_limit_interval_seconds)
                      case _:
          -                raise NotImplementedError
          +                raise NotImplementedErro
              return global_rate_limiter
          ```

          Output:
          bot/bot/main.py:111: misspelling: RedisSlidingRateLimter
          bot/bot/main.py:113: misspelling: NotImplementedErro
          EOS
          )
            userPrompt="$diff"

            system=$(jq -n --arg role "system" --arg content "$systemPrompt" '{"role": $role, "content": $content}')
            user=$(jq -n --arg role "user" --arg content "$userPrompt" '{"role": $role, "content": $content}')
            body=$(keelai "$system" "$user")

            curl -sSL https://github.com/reviewdog/reviewdog/releases/download/v0.18.1/reviewdog_0.18.1_Linux_x86_64.tar.gz | tar zx reviewdog
            echo "$body" | ./reviewdog -efm='%f:%l: %m' -reporter=github-pr-review -filter-mode=nofilter
          fi
