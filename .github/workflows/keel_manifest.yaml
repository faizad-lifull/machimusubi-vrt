name: Lint for manifests
on:
  merge_group:
    types: [checks_requested]
  pull_request:
    branches:
      - develop
      - master
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review
env:
  # use embedded GITHUB_TOKEN https://docs.github.com/ja/actions/reference/authentication-in-a-workflow#
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CONFTEST_CACHE_DIR: /tmp/cache/conftest
jobs:
  manifest:
    timeout-minutes: 10
    runs-on: [self-hosted, organization]
    if: github.event.pull_request.draft == false && github.event.pull_request.state == 'open'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # `on.pull_request.paths` does not hook file creation
      - run: |
          if git diff origin/${{ github.event.pull_request.base.ref }} HEAD --name-only --diff-filter=d | grep -E '^manifests/.+/.+\.yaml$'; then
            echo "continue=1" >> $GITHUB_OUTPUT
          else
            echo "continue=0" >> $GITHUB_OUTPUT
          fi
        id: check
      - uses: actions/cache@v3
        id: conftest_cache
        with:
          path: ${{ env.CONFTEST_CACHE_DIR }}
          key: ${{ runner.os }}-conftest-0.23.0
        if: steps.check.outputs.continue == '1'
      - run: |
          mkdir -p "${CONFTEST_CACHE_DIR}"
          wget "https://github.com/open-policy-agent/conftest/releases/download/v0.23.0/conftest_0.23.0_Linux_x86_64.tar.gz" -P "${CONFTEST_CACHE_DIR}"
          tar xzf "${CONFTEST_CACHE_DIR}/conftest_0.23.0_Linux_x86_64.tar.gz" -C "${CONFTEST_CACHE_DIR}"
        if: steps.check.outputs.continue == '1' && steps.conftest_cache.outputs.cache-hit != 'true'
      - run: |
          manifest_yamls=()
          while IFS='' read -r l; do manifest_yamls+=("$l"); done < <((git diff "origin/${{ github.event.pull_request.base.ref }}" HEAD --name-only --diff-filter=d | grep -E '^manifests/.+/.+\.yaml$' | grep -Ev '(kustomization|kustomizeconfig).yaml$' || true))
          if [[ ${#manifest_yamls[@]} -gt 0 ]]; then
            conftestResults=()
            # shellcheck disable=SC2068 # this is intentional
            while IFS='' read -r line; do conftestResults+=("$line"); done < <("${CONFTEST_CACHE_DIR}/conftest" test ${manifest_yamls[@]} --all-namespaces -o json | ./bin/runbook-translator conftest | jq -c .)
            if [[ ${#conftestResults[@]} -gt 0 ]]; then
              body=$(cat <<EOS
          マニフェストがベストプラクティスに従っていません。
          リンク先を参照し、違反しているファイルを修正してください。

          $(for conftestResult in "${conftestResults[@]}"; do
            printf "ファイル名: %s\n" "$(echo "$conftestResult" | jq -r .filename)"
            failures=()
            while IFS='' read -r l; do failures+=("$l"); done < <((echo "${conftestResult}" | jq -c .failures))
            printf "参考リンク\n"
            # shellcheck disable=SC2068 # this is intentional
            for i in $( seq 0 $((${#failures[@]} - 1)) ); do
              failure=$(echo "${failures[@]}" | jq -r ".[$i].msg")
              printf "  - %s\n" "$failure"
            done
            printf "\n"
          done)
          EOS
          )
              curl -sSL -X POST -H "Authorization: token ${GITHUB_TOKEN}" -d "$(jq -n --arg body "$body" '{$body}')" ${{ github.event.pull_request.comments_url }}
              exit 1
            fi
          fi

        if: steps.check.outputs.continue == '1'
